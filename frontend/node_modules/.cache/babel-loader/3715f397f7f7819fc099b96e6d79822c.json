{"ast":null,"code":"import { AES } from \"CryptoJs\";\n\nfunction encode(base) {\n  return AES.encrypt(base, \"matanreut\"); //return Buffer.from(base).toString(\"base64\");\n}\n\nfunction decode(decoded) {\n  return AES.decrypt(decoded, \"matanreut\"); //return Buffer.from(decoded, \"base64\").toString(\"ascii\");\n}\n\nexports.encodeObject = base => {\n  let obj = {};\n\n  for (let [key, value] of Object.entries(base)) {\n    obj[encode(key)] = encode(value);\n  }\n\n  return obj;\n};\n\nmodule.exports.decodeObject = decoded => {\n  let obj = {};\n\n  for (let [key, value] of Object.entries(decoded)) {\n    obj[decode(key)] = decode(value);\n  }\n\n  return obj;\n};\n\nmodule.exports.encodeArray = base => {\n  let arr = [];\n  base.forEach(element => {\n    arr.push(module.exports.encodeObject(element));\n  });\n  return arr;\n};\n\nmodule.exports.decodeArray = decoded => {\n  let arr = [];\n  decoded.forEach(element => {\n    arr.push(module.exports.decodeObject(element));\n  });\n  return arr;\n};","map":{"version":3,"sources":["C:/Users/jakes/Documents/semester 7/To-Do/frontend/src/coder.jsx"],"names":["AES","encode","base","encrypt","decode","decoded","decrypt","exports","encodeObject","obj","key","value","Object","entries","module","decodeObject","encodeArray","arr","forEach","element","push","decodeArray"],"mappings":"AAAA,SAASA,GAAT,QAAoB,UAApB;;AAEA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;AAClB,SAAOF,GAAG,CAACG,OAAJ,CAAYD,IAAZ,EAAkB,WAAlB,CAAP,CADkB,CAElB;AACH;;AAED,SAASE,MAAT,CAAgBC,OAAhB,EAAyB;AACrB,SAAOL,GAAG,CAACM,OAAJ,CAAYD,OAAZ,EAAqB,WAArB,CAAP,CADqB,CAErB;AACH;;AAEDE,OAAO,CAACC,YAAR,GAAuBN,IAAI,IAAI;AAC3B,MAAIO,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAeX,IAAf,CAAzB,EAA+C;AAC3CO,IAAAA,GAAG,CAACR,MAAM,CAACS,GAAD,CAAP,CAAH,GAAmBT,MAAM,CAACU,KAAD,CAAzB;AACH;;AACD,SAAOF,GAAP;AACH,CAND;;AAQAK,MAAM,CAACP,OAAP,CAAeQ,YAAf,GAA8BV,OAAO,IAAI;AACrC,MAAII,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAeR,OAAf,CAAzB,EAAkD;AAC9CI,IAAAA,GAAG,CAACL,MAAM,CAACM,GAAD,CAAP,CAAH,GAAmBN,MAAM,CAACO,KAAD,CAAzB;AACH;;AACD,SAAOF,GAAP;AACH,CAND;;AAQAK,MAAM,CAACP,OAAP,CAAeS,WAAf,GAA6Bd,IAAI,IAAI;AACjC,MAAIe,GAAG,GAAG,EAAV;AACAf,EAAAA,IAAI,CAACgB,OAAL,CAAaC,OAAO,IAAI;AACpBF,IAAAA,GAAG,CAACG,IAAJ,CAASN,MAAM,CAACP,OAAP,CAAeC,YAAf,CAA4BW,OAA5B,CAAT;AACH,GAFD;AAGA,SAAOF,GAAP;AACH,CAND;;AAQAH,MAAM,CAACP,OAAP,CAAec,WAAf,GAA6BhB,OAAO,IAAI;AACpC,MAAIY,GAAG,GAAG,EAAV;AACAZ,EAAAA,OAAO,CAACa,OAAR,CAAgBC,OAAO,IAAI;AACvBF,IAAAA,GAAG,CAACG,IAAJ,CAASN,MAAM,CAACP,OAAP,CAAeQ,YAAf,CAA4BI,OAA5B,CAAT;AACH,GAFD;AAGA,SAAOF,GAAP;AACH,CAND","sourcesContent":["import { AES } from \"CryptoJs\";\r\n\r\nfunction encode(base) {\r\n    return AES.encrypt(base, \"matanreut\");\r\n    //return Buffer.from(base).toString(\"base64\");\r\n}\r\n\r\nfunction decode(decoded) {\r\n    return AES.decrypt(decoded, \"matanreut\");\r\n    //return Buffer.from(decoded, \"base64\").toString(\"ascii\");\r\n}\r\n\r\nexports.encodeObject = base => {\r\n    let obj = {};\r\n    for (let [key, value] of Object.entries(base)) {\r\n        obj[encode(key)] = encode(value);\r\n    }\r\n    return obj;\r\n};\r\n\r\nmodule.exports.decodeObject = decoded => {\r\n    let obj = {};\r\n    for (let [key, value] of Object.entries(decoded)) {\r\n        obj[decode(key)] = decode(value);\r\n    }\r\n    return obj;\r\n};\r\n\r\nmodule.exports.encodeArray = base => {\r\n    let arr = [];\r\n    base.forEach(element => {\r\n        arr.push(module.exports.encodeObject(element));\r\n    });\r\n    return arr;\r\n};\r\n\r\nmodule.exports.decodeArray = decoded => {\r\n    let arr = [];\r\n    decoded.forEach(element => {\r\n        arr.push(module.exports.decodeObject(element));\r\n    });\r\n    return arr;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}