{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jakes\\\\Documents\\\\vscodeProjects\\\\To-Do\\\\frontend\\\\src\\\\App.tsx\";\nimport React from \"react\";\nimport \"./styles/App.css\";\nimport Tasks from \"./components/tasks\";\nimport NavBar from \"./components/navbar\";\nimport Popup, { messages } from \"./components/popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: [],\n      currentText: \"\",\n      popup: messages.none\n    };\n\n    this.maxId = () => {\n      return this.state.tasks.reduce((max, character) => character.id > max ? character.id : max, 0);\n    };\n\n    this.handleText = currentText => {\n      this.setState({\n        currentText\n      });\n    };\n\n    this.handleAdd = () => {\n      if (this.state.currentText) {\n        const tasks = [...this.state.tasks];\n        const newTask = {\n          id: this.maxId() + 1,\n          description: this.state.currentText,\n          checked: false\n        };\n        tasks.push(newTask);\n        this.setState({\n          tasks: tasks,\n          currentText: \"\"\n        });\n      }\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        popup: messages.reset\n      });\n    };\n\n    this.reset = () => {\n      const tasks = [...this.state.tasks];\n      tasks.forEach(t => {\n        t.checked = false;\n      });\n      this.setState({\n        tasks\n      });\n    };\n\n    this.handleDeleteDone = () => {\n      this.setState({\n        popup: true,\n        popupText: \"Are you sure you want to delete all checked tasks?\"\n      });\n    };\n\n    this.deleteDone = () => {\n      const tasks = this.state.tasks.filter(t => !t.checked);\n      this.setState({\n        tasks\n      });\n    };\n\n    this.handleClear = () => {\n      this.setState({\n        popup: true,\n        popupText: \"Are you sure you want to delete all tasks?\"\n      });\n    };\n\n    this.clear = () => {\n      this.setState({\n        tasks: []\n      });\n    };\n\n    this.handleDelete = id => {\n      const tasks = this.state.tasks.filter(t => t.id !== id);\n      this.setState({\n        tasks\n      });\n    };\n\n    this.handleToggle = id => {\n      const tasks = [...this.state.tasks];\n      tasks.forEach(t => {\n        if (t.id === id) t.checked = !t.checked;\n      });\n      this.setState({\n        tasks\n      });\n    };\n\n    this.handlePopupCancle = () => {\n      this.setState({\n        popup: false\n      });\n    };\n\n    this.handleYes = () => {};\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Popup, {\n        trigger: this.state.popup,\n        text: this.state.popupText,\n        onCancel: this.handlePopupCancle,\n        onYes: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NavBar, {\n        value: this.state.currentText,\n        numTasks: this.state.tasks.length,\n        numDoneTasks: this.state.tasks.filter(t => t.checked).length,\n        onText: this.handleText,\n        onAdd: this.handleAdd,\n        onReset: this.handleReset,\n        onDeleteDone: this.handleDeleteDone,\n        onClear: this.handleClear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: this.state.tasks,\n        onDelete: this.handleDelete,\n        onToggle: this.handleToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/jakes/Documents/vscodeProjects/To-Do/frontend/src/App.tsx"],"names":["React","Tasks","NavBar","Popup","messages","App","Component","state","tasks","currentText","popup","none","maxId","reduce","max","character","id","handleText","setState","handleAdd","newTask","description","checked","push","handleReset","reset","forEach","t","handleDeleteDone","popupText","deleteDone","filter","handleClear","clear","handleDelete","handleToggle","handlePopupCancle","handleYes","render","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./styles/App.css\";\nimport { TaskTemplate } from \"./components/task\";\nimport Tasks from \"./components/tasks\";\nimport NavBar from \"./components/navbar\";\nimport Popup, { messages } from \"./components/popup\";\n\ninterface AppState {\n    tasks: TaskTemplate[];\n    currentText: string;\n    popup: messages;\n}\n\nclass App extends React.Component {\n    state: AppState = {\n        tasks: [],\n        currentText: \"\",\n        popup: messages.none,\n    };\n\n    maxId = (): number => {\n        return this.state.tasks.reduce(\n            (max, character) => (character.id > max ? character.id : max),\n            0\n        );\n    };\n\n    handleText = (currentText: string): void => {\n        this.setState({ currentText });\n    };\n\n    handleAdd = (): void => {\n        if (this.state.currentText) {\n            const tasks = [...this.state.tasks];\n            const newTask: TaskTemplate = {\n                id: this.maxId() + 1,\n                description: this.state.currentText,\n                checked: false,\n            };\n            tasks.push(newTask);\n            this.setState({ tasks: tasks, currentText: \"\" });\n        }\n    };\n\n    handleReset = (): void => {\n        this.setState({\n            popup: messages.reset,\n        });\n    };\n\n    reset = (): void => {\n        const tasks = [...this.state.tasks];\n        tasks.forEach(t => {\n            t.checked = false;\n        });\n        this.setState({ tasks });\n    };\n\n    handleDeleteDone = (): void => {\n        this.setState({\n            popup: true,\n            popupText: \"Are you sure you want to delete all checked tasks?\",\n        });\n    };\n\n    deleteDone = (): void => {\n        const tasks = this.state.tasks.filter(t => !t.checked);\n        this.setState({ tasks });\n    };\n\n    handleClear = (): void => {\n        this.setState({\n            popup: true,\n            popupText: \"Are you sure you want to delete all tasks?\",\n        });\n    };\n\n    clear = () => {\n        this.setState({ tasks: [] });\n    };\n\n    handleDelete = (id: number): void => {\n        const tasks = this.state.tasks.filter(t => t.id !== id);\n        this.setState({ tasks });\n    };\n\n    handleToggle = (id: number): void => {\n        const tasks = [...this.state.tasks];\n        tasks.forEach(t => {\n            if (t.id === id) t.checked = !t.checked;\n        });\n        this.setState({ tasks });\n    };\n\n    handlePopupCancle = (): void => {\n        this.setState({ popup: false });\n    };\n\n    handleYes = (): void => {};\n\n    render() {\n        return (\n            <React.Fragment>\n                <Popup\n                    trigger={this.state.popup}\n                    text={this.state.popupText}\n                    onCancel={this.handlePopupCancle}\n                    onYes={() => {}}\n                ></Popup>\n                <NavBar\n                    value={this.state.currentText}\n                    numTasks={this.state.tasks.length}\n                    numDoneTasks={\n                        this.state.tasks.filter(t => t.checked).length\n                    }\n                    onText={this.handleText}\n                    onAdd={this.handleAdd}\n                    onReset={this.handleReset}\n                    onDeleteDone={this.handleDeleteDone}\n                    onClear={this.handleClear}\n                />\n                <Tasks\n                    tasks={this.state.tasks}\n                    onDelete={this.handleDelete}\n                    onToggle={this.handleToggle}\n                />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}