{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jakes\\\\Documents\\\\semester 7\\\\To-Do\\\\frontend\\\\src\\\\App.tsx\";\nimport React from \"react\";\nimport \"./styles/App.css\";\nimport Axios from \"axios\";\nimport Tasks from \"./components/tasks\";\nimport NavBar from \"./components/navbar\";\nimport Popup, { messages } from \"./components/popup\";\nimport Login from \"./components/login\"; //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: [],\n      currentUser: \"admin\",\n      popup: messages.none,\n      loggedIn: true\n    };\n\n    this.componentDidMount = async () => {\n      const username = localStorage.getItem(\"user\");\n\n      if (username !== null || true) {\n        console.log(\"hi\");\n        await Axios.get(\"http://localhost:3001/api/get\", {\n          data: {\n            username: \"admin\"\n          }\n        }).then(response => {\n          this.setState({\n            tasks: response.data,\n            currentUser: username,\n            loggedIn: true\n          });\n        });\n      }\n    };\n\n    this.maxId = () => {\n      return this.state.tasks.reduce((max, character) => character.id > max ? character.id : max, 0);\n    };\n\n    this.handleAdd = async text => {\n      if (text) {\n        const tasks = [...this.state.tasks];\n        const newTask = {\n          id: this.maxId() + 1,\n          description: text,\n          checked: false\n        };\n        tasks.push(newTask);\n        await Axios.post(\"http://localhost:3001/api/add\", {\n          task: newTask,\n          username: this.state.currentUser\n        });\n        this.setState({\n          tasks\n        });\n      }\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        popup: messages.reset\n      });\n    };\n\n    this.reset = async () => {\n      const tasks = [...this.state.tasks];\n      tasks.forEach(t => {\n        t.checked = false;\n      });\n      await Axios.put(\"http://localhost:3001/api/reset\", {\n        username: this.state.currentUser\n      });\n      this.setState({\n        tasks: tasks,\n        popup: messages.none\n      });\n    };\n\n    this.handleDeleteDone = () => {\n      this.setState({\n        popup: messages.deleteDone\n      });\n    };\n\n    this.deleteDone = async () => {\n      const tasks = this.state.tasks.filter(t => !t.checked);\n      await Axios.delete(\"http://localhost:3001/api/deleteDone\", {\n        data: {\n          username: this.state.currentUser\n        }\n      });\n      this.setState({\n        tasks: tasks,\n        popup: messages.none\n      });\n    };\n\n    this.handleClear = () => {\n      this.setState({\n        popup: messages.clear\n      });\n    };\n\n    this.clear = async () => {\n      await Axios.delete(\"http://localhost:3001/api/clear\", {\n        data: {\n          username: this.state.currentUser\n        }\n      });\n      this.setState({\n        tasks: [],\n        popup: messages.none\n      });\n    };\n\n    this.handleDelete = async id => {\n      const tasks = this.state.tasks.filter(t => t.id !== id);\n      await Axios.delete(\"http://localhost:3001/api/delete\", {\n        data: {\n          id: id\n        }\n      });\n      this.setState({\n        tasks\n      });\n    };\n\n    this.handleToggle = async id => {\n      const tasks = [...this.state.tasks];\n      tasks.forEach(t => {\n        if (t.id === id) t.checked = !t.checked;\n      });\n      await Axios.put(\"http://localhost:3001/api/toggle\", {\n        id: id\n      });\n      this.setState({\n        tasks\n      });\n    };\n\n    this.handlePopupCancle = () => {\n      this.setState({\n        popup: messages.none\n      });\n    };\n\n    this.handleYes = () => {\n      switch (this.state.popup) {\n        case messages.reset:\n          this.reset();\n          break;\n\n        case messages.deleteDone:\n          this.deleteDone();\n          break;\n\n        case messages.clear:\n          this.clear();\n          break;\n      }\n    };\n\n    this.updateCurrentUser = async username => {\n      await Axios.get(\"http://localhost:3001/api/get\", {\n        data: {\n          username: username\n        }\n      }).then(response => {\n        this.setState({\n          tasks: response.data,\n          currentUser: username,\n          loggedIn: true\n        });\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Login, {\n        show: !this.state.loggedIn,\n        onLogin: this.updateCurrentUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Popup, {\n        type: this.state.popup,\n        onCancel: this.handlePopupCancle,\n        onYes: this.handleYes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NavBar, {\n        inactive: this.state.popup.length > 0 || !this.state.loggedIn,\n        numTasks: this.state.tasks.length,\n        numDoneTasks: this.state.tasks.filter(t => t.checked).length,\n        onAdd: this.handleAdd,\n        onReset: this.handleReset,\n        onDeleteDone: this.handleDeleteDone,\n        onClear: this.handleClear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: this.state.tasks,\n        onDelete: this.handleDelete,\n        onToggle: this.handleToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/jakes/Documents/semester 7/To-Do/frontend/src/App.tsx"],"names":["React","Axios","Tasks","NavBar","Popup","messages","Login","App","Component","state","tasks","currentUser","popup","none","loggedIn","componentDidMount","username","localStorage","getItem","console","log","get","data","then","response","setState","maxId","reduce","max","character","id","handleAdd","text","newTask","description","checked","push","post","task","handleReset","reset","forEach","t","put","handleDeleteDone","deleteDone","filter","delete","handleClear","clear","handleDelete","handleToggle","handlePopupCancle","handleYes","updateCurrentUser","render","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./styles/App.css\";\nimport Axios from \"axios\";\nimport { TaskTemplate } from \"./components/task\";\nimport Tasks from \"./components/tasks\";\nimport NavBar from \"./components/navbar\";\nimport Popup, { messages } from \"./components/popup\";\nimport Login from \"./components/login\";\n//\ninterface AppState {\n    tasks: TaskTemplate[];\n    currentUser: string;\n    popup: messages;\n    loggedIn: boolean;\n}\n\nclass App extends React.Component {\n    state: AppState = {\n        tasks: [],\n        currentUser: \"admin\",\n        popup: messages.none,\n        loggedIn: true,\n    };\n\n    componentDidMount = async () => {\n        const username = localStorage.getItem(\"user\");\n        if (username !== null || true) {\n            console.log(\"hi\");\n            await Axios.get(\"http://localhost:3001/api/get\", {\n                data: { username: \"admin\" },\n            }).then(response => {\n                this.setState({\n                    tasks: response.data,\n                    currentUser: username,\n                    loggedIn: true,\n                });\n            });\n        }\n    };\n\n    maxId = (): number => {\n        return this.state.tasks.reduce(\n            (max, character) => (character.id > max ? character.id : max),\n            0\n        );\n    };\n\n    handleAdd = async (text: string) => {\n        if (text) {\n            const tasks = [...this.state.tasks];\n            const newTask: TaskTemplate = {\n                id: this.maxId() + 1,\n                description: text,\n                checked: false,\n            };\n            tasks.push(newTask);\n            await Axios.post(\"http://localhost:3001/api/add\", {\n                task: newTask,\n                username: this.state.currentUser,\n            });\n            this.setState({ tasks });\n        }\n    };\n\n    handleReset = (): void => {\n        this.setState({\n            popup: messages.reset,\n        });\n    };\n\n    reset = async () => {\n        const tasks = [...this.state.tasks];\n        tasks.forEach(t => {\n            t.checked = false;\n        });\n        await Axios.put(\"http://localhost:3001/api/reset\", {\n            username: this.state.currentUser,\n        });\n        this.setState({ tasks: tasks, popup: messages.none });\n    };\n\n    handleDeleteDone = (): void => {\n        this.setState({\n            popup: messages.deleteDone,\n        });\n    };\n\n    deleteDone = async () => {\n        const tasks = this.state.tasks.filter(t => !t.checked);\n        await Axios.delete(\"http://localhost:3001/api/deleteDone\", {\n            data: { username: this.state.currentUser },\n        });\n        this.setState({ tasks: tasks, popup: messages.none });\n    };\n\n    handleClear = (): void => {\n        this.setState({\n            popup: messages.clear,\n        });\n    };\n\n    clear = async () => {\n        await Axios.delete(\"http://localhost:3001/api/clear\", {\n            data: { username: this.state.currentUser },\n        });\n        this.setState({ tasks: [], popup: messages.none });\n    };\n\n    handleDelete = async (id: number) => {\n        const tasks = this.state.tasks.filter(t => t.id !== id);\n        await Axios.delete(\"http://localhost:3001/api/delete\", {\n            data: { id: id },\n        });\n        this.setState({ tasks });\n    };\n\n    handleToggle = async (id: number) => {\n        const tasks = [...this.state.tasks];\n        tasks.forEach(t => {\n            if (t.id === id) t.checked = !t.checked;\n        });\n        await Axios.put(\"http://localhost:3001/api/toggle\", { id: id });\n        this.setState({ tasks });\n    };\n\n    handlePopupCancle = (): void => {\n        this.setState({ popup: messages.none });\n    };\n\n    handleYes = (): void => {\n        switch (this.state.popup) {\n            case messages.reset:\n                this.reset();\n                break;\n            case messages.deleteDone:\n                this.deleteDone();\n                break;\n            case messages.clear:\n                this.clear();\n                break;\n        }\n    };\n\n    updateCurrentUser = async (username: string) => {\n        await Axios.get(\"http://localhost:3001/api/get\", {\n            data: { username: username },\n        }).then(response => {\n            this.setState({\n                tasks: response.data,\n                currentUser: username,\n                loggedIn: true,\n            });\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Login\n                    show={!this.state.loggedIn}\n                    onLogin={this.updateCurrentUser}\n                ></Login>\n                <Popup\n                    type={this.state.popup}\n                    onCancel={this.handlePopupCancle}\n                    onYes={this.handleYes}\n                ></Popup>\n                <NavBar\n                    inactive={\n                        this.state.popup.length > 0 || !this.state.loggedIn\n                    }\n                    numTasks={this.state.tasks.length}\n                    numDoneTasks={\n                        this.state.tasks.filter(t => t.checked).length\n                    }\n                    onAdd={this.handleAdd}\n                    onReset={this.handleReset}\n                    onDeleteDone={this.handleDeleteDone}\n                    onClear={this.handleClear}\n                />\n                <Tasks\n                    tasks={this.state.tasks}\n                    onDelete={this.handleDelete}\n                    onToggle={this.handleToggle}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}