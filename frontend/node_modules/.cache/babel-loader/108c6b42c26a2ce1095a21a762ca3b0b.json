{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jakes\\\\Documents\\\\semester 7\\\\To-Do\\\\frontend\\\\src\\\\App.tsx\";\nimport React from \"react\";\nimport \"./styles/App.css\";\nimport Axios from \"axios\";\nimport Tasks from \"./components/tasks\";\nimport NavBar from \"./components/navbar\";\nimport Popup, { messages } from \"./components/popup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: [],\n      currentText: \"\",\n      popup: messages.none,\n      login: true\n    };\n\n    this.componentDidMount = () => {\n      Axios.get(\"http://localhost:3001/api/get\").then(response => {\n        this.setState({\n          tasks: response.data\n        });\n      });\n    };\n\n    this.maxId = () => {\n      return this.state.tasks.reduce((max, character) => character.id > max ? character.id : max, 0);\n    };\n\n    this.handleText = currentText => {\n      this.setState({\n        currentText\n      });\n    };\n\n    this.handleAdd = async () => {\n      if (this.state.currentText) {\n        const tasks = [...this.state.tasks];\n        const newTask = {\n          id: this.maxId() + 1,\n          description: this.state.currentText,\n          checked: false\n        };\n        tasks.push(newTask);\n        await Axios.post(\"http://localhost:3001/api/add\", newTask);\n        this.setState({\n          tasks: tasks,\n          currentText: \"\"\n        });\n      }\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        popup: messages.reset\n      });\n    };\n\n    this.reset = async () => {\n      const tasks = [...this.state.tasks];\n      tasks.forEach(t => {\n        t.checked = false;\n      });\n      await Axios.put(\"http://localhost:3001/api/reset\");\n      this.setState({\n        tasks: tasks,\n        popup: messages.none\n      });\n    };\n\n    this.handleDeleteDone = () => {\n      this.setState({\n        popup: messages.deleteDone\n      });\n    };\n\n    this.deleteDone = async () => {\n      const tasks = this.state.tasks.filter(t => !t.checked);\n      await Axios.delete(\"http://localhost:3001/api/deleteDone\");\n      this.setState({\n        tasks: tasks,\n        popup: messages.none\n      });\n    };\n\n    this.handleClear = () => {\n      this.setState({\n        popup: messages.clear\n      });\n    };\n\n    this.clear = async () => {\n      await Axios.delete(\"http://localhost:3001/api/clear\");\n      this.setState({\n        tasks: [],\n        popup: messages.none\n      });\n    };\n\n    this.handleDelete = async id => {\n      const tasks = this.state.tasks.filter(t => t.id !== id);\n      await Axios.delete(\"http://localhost:3001/api/delete\", {\n        data: {\n          id: id\n        }\n      });\n      this.setState({\n        tasks\n      });\n    };\n\n    this.handleToggle = async id => {\n      const tasks = [...this.state.tasks];\n      tasks.forEach(t => {\n        if (t.id === id) t.checked = !t.checked;\n      });\n      await Axios.put(\"http://localhost:3001/api/toggle\", {\n        id: id\n      });\n      this.setState({\n        tasks\n      });\n    };\n\n    this.handlePopupCancle = () => {\n      this.setState({\n        popup: messages.none\n      });\n    };\n\n    this.handleYes = () => {\n      switch (this.state.popup) {\n        case messages.reset:\n          this.reset();\n          break;\n\n        case messages.deleteDone:\n          this.deleteDone();\n          break;\n\n        case messages.clear:\n          this.clear();\n          break;\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(Popup, {\n        type: this.state.popup,\n        onCancel: this.handlePopupCancle,\n        onYes: this.handleYes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NavBar, {\n        value: this.state.currentText,\n        numTasks: this.state.tasks.length,\n        numDoneTasks: this.state.tasks.filter(t => t.checked).length,\n        onText: this.handleText,\n        onAdd: this.handleAdd,\n        onReset: this.handleReset,\n        onDeleteDone: this.handleDeleteDone,\n        onClear: this.handleClear\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n        tasks: this.state.tasks,\n        onDelete: this.handleDelete,\n        onToggle: this.handleToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/jakes/Documents/semester 7/To-Do/frontend/src/App.tsx"],"names":["React","Axios","Tasks","NavBar","Popup","messages","App","Component","state","tasks","currentText","popup","none","login","componentDidMount","get","then","response","setState","data","maxId","reduce","max","character","id","handleText","handleAdd","newTask","description","checked","push","post","handleReset","reset","forEach","t","put","handleDeleteDone","deleteDone","filter","delete","handleClear","clear","handleDelete","handleToggle","handlePopupCancle","handleYes","render","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./styles/App.css\";\nimport Axios from \"axios\";\nimport { TaskTemplate } from \"./components/task\";\nimport Tasks from \"./components/tasks\";\nimport NavBar from \"./components/navbar\";\nimport Popup, { messages } from \"./components/popup\";\nimport Login from \"./components/login\";\n//\ninterface AppState {\n    tasks: TaskTemplate[];\n    currentText: string;\n    popup: messages;\n    login: boolean;\n}\n\nclass App extends React.Component {\n    state: AppState = {\n        tasks: [],\n        currentText: \"\",\n        popup: messages.none,\n        login: true,\n    };\n\n    componentDidMount = () => {\n        Axios.get(\"http://localhost:3001/api/get\").then(response => {\n            this.setState({ tasks: response.data });\n        });\n    };\n\n    maxId = (): number => {\n        return this.state.tasks.reduce(\n            (max, character) => (character.id > max ? character.id : max),\n            0\n        );\n    };\n\n    handleText = (currentText: string): void => {\n        this.setState({ currentText });\n    };\n\n    handleAdd = async () => {\n        if (this.state.currentText) {\n            const tasks = [...this.state.tasks];\n            const newTask: TaskTemplate = {\n                id: this.maxId() + 1,\n                description: this.state.currentText,\n                checked: false,\n            };\n            tasks.push(newTask);\n            await Axios.post(\"http://localhost:3001/api/add\", newTask);\n            this.setState({ tasks: tasks, currentText: \"\" });\n        }\n    };\n\n    handleReset = (): void => {\n        this.setState({\n            popup: messages.reset,\n        });\n    };\n\n    reset = async () => {\n        const tasks = [...this.state.tasks];\n        tasks.forEach(t => {\n            t.checked = false;\n        });\n        await Axios.put(\"http://localhost:3001/api/reset\");\n        this.setState({ tasks: tasks, popup: messages.none });\n    };\n\n    handleDeleteDone = (): void => {\n        this.setState({\n            popup: messages.deleteDone,\n        });\n    };\n\n    deleteDone = async () => {\n        const tasks = this.state.tasks.filter(t => !t.checked);\n        await Axios.delete(\"http://localhost:3001/api/deleteDone\");\n        this.setState({ tasks: tasks, popup: messages.none });\n    };\n\n    handleClear = (): void => {\n        this.setState({\n            popup: messages.clear,\n        });\n    };\n\n    clear = async () => {\n        await Axios.delete(\"http://localhost:3001/api/clear\");\n        this.setState({ tasks: [], popup: messages.none });\n    };\n\n    handleDelete = async (id: number) => {\n        const tasks = this.state.tasks.filter(t => t.id !== id);\n        await Axios.delete(\"http://localhost:3001/api/delete\", {\n            data: { id: id },\n        });\n        this.setState({ tasks });\n    };\n\n    handleToggle = async (id: number) => {\n        const tasks = [...this.state.tasks];\n        tasks.forEach(t => {\n            if (t.id === id) t.checked = !t.checked;\n        });\n        await Axios.put(\"http://localhost:3001/api/toggle\", { id: id });\n        this.setState({ tasks });\n    };\n\n    handlePopupCancle = (): void => {\n        this.setState({ popup: messages.none });\n    };\n\n    handleYes = (): void => {\n        switch (this.state.popup) {\n            case messages.reset:\n                this.reset();\n                break;\n            case messages.deleteDone:\n                this.deleteDone();\n                break;\n            case messages.clear:\n                this.clear();\n                break;\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"app\">\n                <Popup\n                    type={this.state.popup}\n                    onCancel={this.handlePopupCancle}\n                    onYes={this.handleYes}\n                ></Popup>\n                <NavBar\n                    value={this.state.currentText}\n                    numTasks={this.state.tasks.length}\n                    numDoneTasks={\n                        this.state.tasks.filter(t => t.checked).length\n                    }\n                    onText={this.handleText}\n                    onAdd={this.handleAdd}\n                    onReset={this.handleReset}\n                    onDeleteDone={this.handleDeleteDone}\n                    onClear={this.handleClear}\n                />\n                <Tasks\n                    tasks={this.state.tasks}\n                    onDelete={this.handleDelete}\n                    onToggle={this.handleToggle}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}