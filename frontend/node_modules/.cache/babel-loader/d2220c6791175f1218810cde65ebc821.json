{"ast":null,"code":"const crypto = require(\"crypto-js\");\n\nconst encode = base => {\n  if (typeof base !== \"string\") return base;\n  return crypto.AES.encrypt(base, \"matanreut\").toString(); //return Buffer.from(base).toString(\"base64\");\n};\n\nconst decode = decoded => {\n  if (typeof decoded !== \"string\") return decoded;\n  return crypto.AES.decrypt(decoded, \"matanreut\").toString(crypto.enc.Utf8); //return Buffer.from(decoded, \"base64\").toString(\"ascii\");\n};\n\nconst encodeObject = base => {\n  let obj = {};\n\n  for (let [key, value] of Object.entries(base)) {\n    obj[encode(key)] = encode(value);\n  }\n\n  return obj;\n};\n\nconst decodeObject = decoded => {\n  let obj = {};\n\n  for (let [key, value] of Object.entries(decoded)) {\n    obj[decode(key)] = decode(value);\n  }\n\n  return obj;\n};\n\nconst encodeArray = base => {\n  let arr = [];\n  base.forEach(element => {\n    arr.push(encodeObject(element));\n  });\n  return arr;\n};\n\nconst decodeArray = decoded => {\n  let arr = [];\n  decoded.forEach(element => {\n    arr.push(decodeObject(element));\n  });\n  return arr;\n};\n\nmodule.exports = {\n  encode,\n  decode,\n  encodeObject,\n  decodeObject,\n  encodeArray,\n  decodeArray\n};","map":{"version":3,"sources":["C:/Users/jakes/Documents/semester 7/To-Do/frontend/src/coder.jsx"],"names":["crypto","require","encode","base","AES","encrypt","toString","decode","decoded","decrypt","enc","Utf8","encodeObject","obj","key","value","Object","entries","decodeObject","encodeArray","arr","forEach","element","push","decodeArray","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,MAAMC,MAAM,GAAGC,IAAI,IAAI;AACnB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B,OAAOA,IAAP;AAC9B,SAAOH,MAAM,CAACI,GAAP,CAAWC,OAAX,CAAmBF,IAAnB,EAAyB,WAAzB,EAAsCG,QAAtC,EAAP,CAFmB,CAGnB;AACH,CAJD;;AAMA,MAAMC,MAAM,GAAGC,OAAO,IAAI;AACtB,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC,OAAOA,OAAP;AACjC,SAAOR,MAAM,CAACI,GAAP,CAAWK,OAAX,CAAmBD,OAAnB,EAA4B,WAA5B,EAAyCF,QAAzC,CAAkDN,MAAM,CAACU,GAAP,CAAWC,IAA7D,CAAP,CAFsB,CAGtB;AACH,CAJD;;AAMA,MAAMC,YAAY,GAAGT,IAAI,IAAI;AACzB,MAAIU,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAed,IAAf,CAAzB,EAA+C;AAC3CU,IAAAA,GAAG,CAACX,MAAM,CAACY,GAAD,CAAP,CAAH,GAAmBZ,MAAM,CAACa,KAAD,CAAzB;AACH;;AACD,SAAOF,GAAP;AACH,CAND;;AAQA,MAAMK,YAAY,GAAGV,OAAO,IAAI;AAC5B,MAAIK,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAeT,OAAf,CAAzB,EAAkD;AAC9CK,IAAAA,GAAG,CAACN,MAAM,CAACO,GAAD,CAAP,CAAH,GAAmBP,MAAM,CAACQ,KAAD,CAAzB;AACH;;AACD,SAAOF,GAAP;AACH,CAND;;AAQA,MAAMM,WAAW,GAAGhB,IAAI,IAAI;AACxB,MAAIiB,GAAG,GAAG,EAAV;AACAjB,EAAAA,IAAI,CAACkB,OAAL,CAAaC,OAAO,IAAI;AACpBF,IAAAA,GAAG,CAACG,IAAJ,CAASX,YAAY,CAACU,OAAD,CAArB;AACH,GAFD;AAGA,SAAOF,GAAP;AACH,CAND;;AAQA,MAAMI,WAAW,GAAGhB,OAAO,IAAI;AAC3B,MAAIY,GAAG,GAAG,EAAV;AACAZ,EAAAA,OAAO,CAACa,OAAR,CAAgBC,OAAO,IAAI;AACvBF,IAAAA,GAAG,CAACG,IAAJ,CAASL,YAAY,CAACI,OAAD,CAArB;AACH,GAFD;AAGA,SAAOF,GAAP;AACH,CAND;;AAQAK,MAAM,CAACC,OAAP,GAAiB;AACbxB,EAAAA,MADa;AAEbK,EAAAA,MAFa;AAGbK,EAAAA,YAHa;AAIbM,EAAAA,YAJa;AAKbC,EAAAA,WALa;AAMbK,EAAAA;AANa,CAAjB","sourcesContent":["const crypto = require(\"crypto-js\");\r\n\r\nconst encode = base => {\r\n    if (typeof base !== \"string\") return base;\r\n    return crypto.AES.encrypt(base, \"matanreut\").toString();\r\n    //return Buffer.from(base).toString(\"base64\");\r\n};\r\n\r\nconst decode = decoded => {\r\n    if (typeof decoded !== \"string\") return decoded;\r\n    return crypto.AES.decrypt(decoded, \"matanreut\").toString(crypto.enc.Utf8);\r\n    //return Buffer.from(decoded, \"base64\").toString(\"ascii\");\r\n};\r\n\r\nconst encodeObject = base => {\r\n    let obj = {};\r\n    for (let [key, value] of Object.entries(base)) {\r\n        obj[encode(key)] = encode(value);\r\n    }\r\n    return obj;\r\n};\r\n\r\nconst decodeObject = decoded => {\r\n    let obj = {};\r\n    for (let [key, value] of Object.entries(decoded)) {\r\n        obj[decode(key)] = decode(value);\r\n    }\r\n    return obj;\r\n};\r\n\r\nconst encodeArray = base => {\r\n    let arr = [];\r\n    base.forEach(element => {\r\n        arr.push(encodeObject(element));\r\n    });\r\n    return arr;\r\n};\r\n\r\nconst decodeArray = decoded => {\r\n    let arr = [];\r\n    decoded.forEach(element => {\r\n        arr.push(decodeObject(element));\r\n    });\r\n    return arr;\r\n};\r\n\r\nmodule.exports = {\r\n    encode,\r\n    decode,\r\n    encodeObject,\r\n    decodeObject,\r\n    encodeArray,\r\n    decodeArray,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}