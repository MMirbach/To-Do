{"ast":null,"code":"import { AES, enc } from \"crypto-js\";\nexport const encode = base => {\n  return AES.encrypt(base, \"matanreut\"); //return Buffer.from(base).toString(\"base64\");\n};\nexport const decode = decoded => {\n  return AES.decrypt(decoded, \"matanreut\").toString(enc.u); //return Buffer.from(decoded, \"base64\").toString(\"ascii\");\n};\nexport const encodeObject = base => {\n  let obj = {};\n\n  for (let [key, value] of Object.entries(base)) {\n    obj[encode(key)] = encode(value);\n  }\n\n  return obj;\n};\nexport const decodeObject = decoded => {\n  let obj = {};\n\n  for (let [key, value] of Object.entries(decoded)) {\n    obj[decode(key)] = decode(value);\n  }\n\n  return obj;\n};\nexport const encodeArray = base => {\n  let arr = [];\n  base.forEach(element => {\n    arr.push(module.exports.encodeObject(element));\n  });\n  return arr;\n};\nexport const decodeArray = decoded => {\n  let arr = [];\n  decoded.forEach(element => {\n    arr.push(module.exports.decodeObject(element));\n  });\n  return arr;\n};","map":{"version":3,"sources":["C:/Users/jakes/Documents/semester 7/To-Do/frontend/src/coder.jsx"],"names":["AES","enc","encode","base","encrypt","decode","decoded","decrypt","toString","u","encodeObject","obj","key","value","Object","entries","decodeObject","encodeArray","arr","forEach","element","push","module","exports","decodeArray"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,QAAyB,WAAzB;AAEA,OAAO,MAAMC,MAAM,GAAGC,IAAI,IAAI;AAC1B,SAAOH,GAAG,CAACI,OAAJ,CAAYD,IAAZ,EAAkB,WAAlB,CAAP,CAD0B,CAE1B;AACH,CAHM;AAKP,OAAO,MAAME,MAAM,GAAGC,OAAO,IAAI;AAC7B,SAAON,GAAG,CAACO,OAAJ,CAAYD,OAAZ,EAAqB,WAArB,EAAkCE,QAAlC,CAA2CP,GAAG,CAACQ,CAA/C,CAAP,CAD6B,CAE7B;AACH,CAHM;AAKP,OAAO,MAAMC,YAAY,GAAGP,IAAI,IAAI;AAChC,MAAIQ,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAeZ,IAAf,CAAzB,EAA+C;AAC3CQ,IAAAA,GAAG,CAACT,MAAM,CAACU,GAAD,CAAP,CAAH,GAAmBV,MAAM,CAACW,KAAD,CAAzB;AACH;;AACD,SAAOF,GAAP;AACH,CANM;AAQP,OAAO,MAAMK,YAAY,GAAGV,OAAO,IAAI;AACnC,MAAIK,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBC,MAAM,CAACC,OAAP,CAAeT,OAAf,CAAzB,EAAkD;AAC9CK,IAAAA,GAAG,CAACN,MAAM,CAACO,GAAD,CAAP,CAAH,GAAmBP,MAAM,CAACQ,KAAD,CAAzB;AACH;;AACD,SAAOF,GAAP;AACH,CANM;AAQP,OAAO,MAAMM,WAAW,GAAGd,IAAI,IAAI;AAC/B,MAAIe,GAAG,GAAG,EAAV;AACAf,EAAAA,IAAI,CAACgB,OAAL,CAAaC,OAAO,IAAI;AACpBF,IAAAA,GAAG,CAACG,IAAJ,CAASC,MAAM,CAACC,OAAP,CAAeb,YAAf,CAA4BU,OAA5B,CAAT;AACH,GAFD;AAGA,SAAOF,GAAP;AACH,CANM;AAQP,OAAO,MAAMM,WAAW,GAAGlB,OAAO,IAAI;AAClC,MAAIY,GAAG,GAAG,EAAV;AACAZ,EAAAA,OAAO,CAACa,OAAR,CAAgBC,OAAO,IAAI;AACvBF,IAAAA,GAAG,CAACG,IAAJ,CAASC,MAAM,CAACC,OAAP,CAAeP,YAAf,CAA4BI,OAA5B,CAAT;AACH,GAFD;AAGA,SAAOF,GAAP;AACH,CANM","sourcesContent":["import { AES, enc } from \"crypto-js\";\r\n\r\nexport const encode = base => {\r\n    return AES.encrypt(base, \"matanreut\");\r\n    //return Buffer.from(base).toString(\"base64\");\r\n};\r\n\r\nexport const decode = decoded => {\r\n    return AES.decrypt(decoded, \"matanreut\").toString(enc.u);\r\n    //return Buffer.from(decoded, \"base64\").toString(\"ascii\");\r\n};\r\n\r\nexport const encodeObject = base => {\r\n    let obj = {};\r\n    for (let [key, value] of Object.entries(base)) {\r\n        obj[encode(key)] = encode(value);\r\n    }\r\n    return obj;\r\n};\r\n\r\nexport const decodeObject = decoded => {\r\n    let obj = {};\r\n    for (let [key, value] of Object.entries(decoded)) {\r\n        obj[decode(key)] = decode(value);\r\n    }\r\n    return obj;\r\n};\r\n\r\nexport const encodeArray = base => {\r\n    let arr = [];\r\n    base.forEach(element => {\r\n        arr.push(module.exports.encodeObject(element));\r\n    });\r\n    return arr;\r\n};\r\n\r\nexport const decodeArray = decoded => {\r\n    let arr = [];\r\n    decoded.forEach(element => {\r\n        arr.push(module.exports.decodeObject(element));\r\n    });\r\n    return arr;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}